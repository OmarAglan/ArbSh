[2025-05-07 20:11:53] Starting ArbSh v0.7.5 Feature Test...
[2025-05-07 20:11:53] Building ArbSh project...
[2025-05-07 20:11:58] Build successful.
[2025-05-07 20:11:58] Executing ArbSh with test commands...
[2025-05-07 20:11:58] --- ArbSh Start Output ---
[2025-05-07 20:11:58] Writing commands to ArbSh stdin...
[2025-05-07 20:12:03] Finished writing commands.
[2025-05-07 20:12:03] Reading ArbSh stdout/stderr...
Welcome to ArbSh (C# Prototype)!
Type 'exit' to quit.
DEBUG: Received command: # --- Basic Commands ---
DEBUG (Parser): Parsing '# --- Basic Commands ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Command
DEBUG (Parser): Parsing 'Get-Command'...
DEBUG (Parser): Processing statement: 'Get-Command'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Command'...
DEBUG (Discovery): Building command cache...
DEBUG (Discovery): Found cmdlet 'Get-Command' -> ArbSh.Console.Commands.GetCommandCmdlet
DEBUG (Discovery): Found cmdlet 'Get-Help' -> ArbSh.Console.Commands.GetHelpCmdlet
DEBUG (Discovery): Found Arabic alias 'احصل-مساعدة' -> ArbSh.Console.Commands.GetHelpCmdlet
DEBUG (Discovery): Found cmdlet 'Test-Array-Binding' -> ArbSh.Console.Commands.TestArrayBindingCmdlet
DEBUG (Discovery): Found cmdlet 'Write-Output' -> ArbSh.Console.Commands.WriteOutputCmdlet
DEBUG (Discovery): Cache built with 5 total command name entries (including aliases).
DEBUG (Executor Task): Starting task for 'Get-Command'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Binder): Binding parameters for GetCommandCmdlet...
DEBUG (Executor Task): 'Get-Command' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Command' finished processing.
DEBUG (Executor Task): Stage 'Get-Command' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=5, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'احصل-مساعدة'
احصل-مساعدة
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Get-Command'
Get-Command
DEBUG (Executor Output): Processing output item #3 (IsError=False): 'Get-Help'
Get-Help
DEBUG (Executor Output): Processing output item #4 (IsError=False): 'Test-Array-Binding'
Test-Array-Binding
DEBUG (Executor Output): Processing output item #5 (IsError=False): 'Write-Output'
Write-Output
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Hello from Write-Output!'
DEBUG (Parser): Parsing 'Write-Output 'Hello from Write-Output!''...
DEBUG (Parser): Processing statement: 'Write-Output 'Hello from Write-Output!''
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Hello from Write-Output!') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Hello from Write-Output!'
Hello from Write-Output!
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Test-Array-Binding one two three
DEBUG (Parser): Parsing 'Test-Array-Binding one two three'...
DEBUG (Parser): Processing statement: 'Test-Array-Binding one two three'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Test-Array-Binding'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Test-Array-Binding'...
DEBUG (Binder): Binding parameters for TestArrayBindingCmdlet...
DEBUG (Binder): Bound 1 remaining positional argument(s) starting at 0 to array parameter 'InputStrings' (Type: String[])
DEBUG (Executor Task): 'Test-Array-Binding' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Test-Array-Binding' finished processing.
DEBUG (Executor Task): Stage 'Test-Array-Binding' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=3, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'MySwitch value: False'
MySwitch value: False
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Received 1 strings:'
Received 1 strings:
DEBUG (Executor Output): Processing output item #3 (IsError=False): '  [0]: 'onetwothree''
  [0]: 'onetwothree'
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Test-Array-Binding -MySwitch four five
DEBUG (Parser): Parsing 'Test-Array-Binding -MySwitch four five'...
DEBUG (Parser): Processing statement: 'Test-Array-Binding -MySwitch four five'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Test-Array-Binding'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Test-Array-Binding'...
DEBUG (Binder): Binding parameters for TestArrayBindingCmdlet...
DEBUG (Binder): Bound 1 remaining positional argument(s) starting at 0 to array parameter 'InputStrings' (Type: String[])
DEBUG (Binder): Found parameter via English name '-MySwitch'.
Task Error (ParameterBinding) in 'Test-Array-Binding': A value 'four' cannot be specified for the boolean (switch) parameter '-MySwitch'.
DEBUG (Executor Task): Stage 'Test-Array-Binding' completed adding output.
ERROR (Executor): One or more pipeline tasks failed:
DEBUG (Executor): No final output to process (pipeline might have failed or produced no output).
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Help System ---
DEBUG (Parser): Parsing '# --- Help System ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Help
DEBUG (Parser): Parsing 'Get-Help'...
DEBUG (Parser): Processing statement: 'Get-Help'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Help'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Help'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Executor Task): 'Get-Help' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Help' finished processing.
DEBUG (Executor Task): Stage 'Get-Help' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=2, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Placeholder general help message. Try 'Get-Help <Command-Name>'.'
Placeholder general help message. Try 'Get-Help <Command-Name>'.
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Example: Get-Help Get-Command'
Example: Get-Help Get-Command
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Help Get-Command
DEBUG (Parser): Parsing 'Get-Help Get-Command'...
DEBUG (Parser): Processing statement: 'Get-Help Get-Command'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Help'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Help'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Get-Command') to property 'CommandName' (Type: String)
DEBUG (Executor Task): 'Get-Help' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Help' finished processing.
DEBUG (Executor Task): Stage 'Get-Help' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): '
NAME
    Get-Command

SYNOPSIS
    (Synopsis for Get-Command not available)

SYNTAX
    Get-Command
'

NAME
    Get-Command

SYNOPSIS
    (Synopsis for Get-Command not available)

SYNTAX
    Get-Command

DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Help Write-Output -Full
DEBUG (Parser): Parsing 'Get-Help Write-Output -Full'...
DEBUG (Parser): Processing statement: 'Get-Help Write-Output -Full'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Help'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Help'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Write-Output') to property 'CommandName' (Type: String)
DEBUG (Binder): Found parameter via English name '-Full'.
DEBUG (Binder): Bound switch parameter '-Full' to True.
DEBUG (Executor Task): 'Get-Help' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Help' finished processing.
DEBUG (Executor Task): Stage 'Get-Help' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): '
NAME
    Write-Output

SYNOPSIS
    (Synopsis for Write-Output not available)

SYNTAX
    Write-Output [-InputObject <Object>]

PARAMETERS
    -InputObject <Object>
        The object(s) to write to the output stream.
        Required?                    False
        Position?                    0
        Accepts pipeline input?      True (By Value)

'

NAME
    Write-Output

SYNOPSIS
    (Synopsis for Write-Output not available)

SYNTAX
    Write-Output [-InputObject <Object>]

PARAMETERS
    -InputObject <Object>
        The object(s) to write to the output stream.
        Required?                    False
        Position?                    0
        Accepts pipeline input?      True (By Value)


DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Help Test-Array-Binding -Full
DEBUG (Parser): Parsing 'Get-Help Test-Array-Binding -Full'...
DEBUG (Parser): Processing statement: 'Get-Help Test-Array-Binding -Full'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Help'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Help'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Test-Array-Binding') to property 'CommandName' (Type: String)
DEBUG (Binder): Found parameter via English name '-Full'.
DEBUG (Binder): Bound switch parameter '-Full' to True.
DEBUG (Executor Task): 'Get-Help' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Help' finished processing.
DEBUG (Executor Task): Stage 'Get-Help' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): '
NAME
    Test-Array-Binding

SYNOPSIS
    (Synopsis for Test-Array-Binding not available)

SYNTAX
    Test-Array-Binding [-InputStrings <String[]>] [-MySwitch]

PARAMETERS
    -InputStrings <String[]>
        Accepts multiple string arguments.
        Required?                    False
        Position?                    0
        Accepts pipeline input?      False

    -MySwitch <Boolean>
        An optional switch.
        Required?                    False
        Position?                    Named
        Accepts pipeline input?      False

'

NAME
    Test-Array-Binding

SYNOPSIS
    (Synopsis for Test-Array-Binding not available)

SYNTAX
    Test-Array-Binding [-InputStrings <String[]>] [-MySwitch]

PARAMETERS
    -InputStrings <String[]>
        Accepts multiple string arguments.
        Required?                    False
        Position?                    0
        Accepts pipeline input?      False

    -MySwitch <Boolean>
        An optional switch.
        Required?                    False
        Position?                    Named
        Accepts pipeline input?      False


DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Help NonExistentCommand
DEBUG (Parser): Parsing 'Get-Help NonExistentCommand'...
DEBUG (Parser): Processing statement: 'Get-Help NonExistentCommand'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Help'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Help'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('NonExistentCommand') to property 'CommandName' (Type: String)
DEBUG (Executor Task): 'Get-Help' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Help' finished processing.
DEBUG (Executor Task): Stage 'Get-Help' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Help Error: Command 'NonExistentCommand' not found.'
Help Error: Command 'NonExistentCommand' not found.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Arabic Name Tests (Phase 3 Goal) ---
DEBUG (Parser): Parsing '# --- Arabic Name Tests (Phase 3 Goal) ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: احصل-مساعدة
DEBUG (Parser): Parsing 'احصل-مساعدة'...
DEBUG (Parser): Processing statement: 'احصل-مساعدة'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'احصل-مساعدة'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'احصل-مساعدة'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Executor Task): 'احصل-مساعدة' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'احصل-مساعدة' finished processing.
DEBUG (Executor Task): Stage 'احصل-مساعدة' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=2, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Placeholder general help message. Try 'Get-Help <Command-Name>'.'
Placeholder general help message. Try 'Get-Help <Command-Name>'.
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Example: Get-Help Get-Command'
Example: Get-Help Get-Command
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: احصل-مساعدة Get-Command
DEBUG (Parser): Parsing 'احصل-مساعدة Get-Command'...
DEBUG (Parser): Processing statement: 'احصل-مساعدة Get-Command'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'احصل-مساعدة'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'احصل-مساعدة'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Get-Command') to property 'CommandName' (Type: String)
DEBUG (Executor Task): 'احصل-مساعدة' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'احصل-مساعدة' finished processing.
DEBUG (Executor Task): Stage 'احصل-مساعدة' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): '
NAME
    Get-Command

SYNOPSIS
    (Synopsis for Get-Command not available)

SYNTAX
    Get-Command
'

NAME
    Get-Command

SYNOPSIS
    (Synopsis for Get-Command not available)

SYNTAX
    Get-Command

DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Help -الاسم Get-Command
DEBUG (Parser): Parsing 'Get-Help -الاسم Get-Command'...
DEBUG (Parser): Processing statement: 'Get-Help -الاسم Get-Command'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Help'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Help'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Binder): Found parameter via Arabic name '-الاسم'.
DEBUG (Binder): Bound named parameter '-الاسم' to value 'Get-Command' (Type: String)
DEBUG (Executor Task): 'Get-Help' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Help' finished processing.
DEBUG (Executor Task): Stage 'Get-Help' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): '
NAME
    Get-Command

SYNOPSIS
    (Synopsis for Get-Command not available)

SYNTAX
    Get-Command
'

NAME
    Get-Command

SYNOPSIS
    (Synopsis for Get-Command not available)

SYNTAX
    Get-Command

DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: احصل-مساعدة -CommandName Get-Command
DEBUG (Parser): Parsing 'احصل-مساعدة -CommandName Get-Command'...
DEBUG (Parser): Processing statement: 'احصل-مساعدة -CommandName Get-Command'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'احصل-مساعدة'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'احصل-مساعدة'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Binder): Found parameter via English name '-CommandName'.
DEBUG (Binder): Bound named parameter '-CommandName' to value 'Get-Command' (Type: String)
DEBUG (Executor Task): 'احصل-مساعدة' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'احصل-مساعدة' finished processing.
DEBUG (Executor Task): Stage 'احصل-مساعدة' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): '
NAME
    Get-Command

SYNOPSIS
    (Synopsis for Get-Command not available)

SYNTAX
    Get-Command
'

NAME
    Get-Command

SYNOPSIS
    (Synopsis for Get-Command not available)

SYNTAX
    Get-Command

DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Help -الاسم Write-Output -Full
DEBUG (Parser): Parsing 'Get-Help -الاسم Write-Output -Full'...
DEBUG (Parser): Processing statement: 'Get-Help -الاسم Write-Output -Full'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Help'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Help'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Binder): Found parameter via Arabic name '-الاسم'.
DEBUG (Binder): Bound named parameter '-الاسم' to value 'Write-Output' (Type: String)
DEBUG (Binder): Found parameter via English name '-Full'.
DEBUG (Binder): Bound switch parameter '-Full' to True.
DEBUG (Executor Task): 'Get-Help' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Help' finished processing.
DEBUG (Executor Task): Stage 'Get-Help' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): '
NAME
    Write-Output

SYNOPSIS
    (Synopsis for Write-Output not available)

SYNTAX
    Write-Output [-InputObject <Object>]

PARAMETERS
    -InputObject <Object>
        The object(s) to write to the output stream.
        Required?                    False
        Position?                    0
        Accepts pipeline input?      True (By Value)

'

NAME
    Write-Output

SYNOPSIS
    (Synopsis for Write-Output not available)

SYNTAX
    Write-Output [-InputObject <Object>]

PARAMETERS
    -InputObject <Object>
        The object(s) to write to the output stream.
        Required?                    False
        Position?                    0
        Accepts pipeline input?      True (By Value)


DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Pipeline ---
DEBUG (Parser): Parsing '# --- Pipeline ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Command | Write-Output
DEBUG (Parser): Parsing 'Get-Command | Write-Output'...
DEBUG (Parser): Processing statement: 'Get-Command | Write-Output'
DEBUG (Parser): Statement parsed into 2 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (2 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Command'...
DEBUG (Executor Pipeline): Preparing stage 1: 'Write-Output'...
DEBUG (Executor Task): Starting task for 'Get-Command'...
DEBUG (Binder): Binding parameters for GetCommandCmdlet...
DEBUG (Executor Task): 'Get-Command' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Command' finished processing.
DEBUG (Executor Task): Stage 'Get-Command' completed adding output.
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Executor Task): 'Write-Output' consuming input...
DEBUG (Executor): Waiting for 2 task(s) in the pipeline to complete...
DEBUG (Executor Task): 'Write-Output' finished consuming input.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=5, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'احصل-مساعدة'
احصل-مساعدة
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Get-Command'
Get-Command
DEBUG (Executor Output): Processing output item #3 (IsError=False): 'Get-Help'
Get-Help
DEBUG (Executor Output): Processing output item #4 (IsError=False): 'Test-Array-Binding'
Test-Array-Binding
DEBUG (Executor Output): Processing output item #5 (IsError=False): 'Write-Output'
Write-Output
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # Test pipeline binding (CommandInfo object to Write-Outputs InputObject)
DEBUG (Parser): Parsing '# Test pipeline binding (CommandInfo object to Write-Outputs InputObject)'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Command | Test-Array-Binding # This should show 0 strings, as CommandInfo doesnt match string[]
DEBUG (Parser): Parsing 'Get-Command | Test-Array-Binding # This should show 0 strings, as CommandInfo doesnt match string[]'...
DEBUG (Parser): Processing statement: 'Get-Command | Test-Array-Binding'
DEBUG (Parser): Statement parsed into 2 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (2 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Command'...
DEBUG (Executor Pipeline): Preparing stage 1: 'Test-Array-Binding'...
DEBUG (Executor): Waiting for 2 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Command'...
DEBUG (Binder): Binding parameters for GetCommandCmdlet...
DEBUG (Executor Task): 'Get-Command' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Command' finished processing.
DEBUG (Executor Task): Stage 'Get-Command' completed adding output.
DEBUG (Executor Task): Starting task for 'Test-Array-Binding'...
DEBUG (Binder): Binding parameters for TestArrayBindingCmdlet...
DEBUG (Executor Task): 'Test-Array-Binding' consuming input...
DEBUG (Executor Task): 'Test-Array-Binding' finished consuming input.
DEBUG (Executor Task): 'Test-Array-Binding' finished processing.
DEBUG (Executor Task): Stage 'Test-Array-Binding' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=2, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'MySwitch value: False'
MySwitch value: False
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Received no strings.'
Received no strings.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Statement Separator ---
DEBUG (Parser): Parsing '# --- Statement Separator ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Statement 1'; Write-Output 'Statement 2'
DEBUG (Parser): Parsing 'Write-Output 'Statement 1'; Write-Output 'Statement 2''...
DEBUG (Parser): Processing statement: 'Write-Output 'Statement 1''
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Processing statement: 'Write-Output 'Statement 2''
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 2 statement(s).
DEBUG (Executor): Executing 2 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Statement 1') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Statement 1'
Statement 1
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Statement 2') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Statement 2'
Statement 2
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Command; Write-Output 'After Get-Command'
DEBUG (Parser): Parsing 'Get-Command; Write-Output 'After Get-Command''...
DEBUG (Parser): Processing statement: 'Get-Command'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Processing statement: 'Write-Output 'After Get-Command''
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 2 statement(s).
DEBUG (Executor): Executing 2 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Command'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Command'...
DEBUG (Binder): Binding parameters for GetCommandCmdlet...
DEBUG (Executor Task): 'Get-Command' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Command' finished processing.
DEBUG (Executor Task): Stage 'Get-Command' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=5, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'احصل-مساعدة'
احصل-مساعدة
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Get-Command'
Get-Command
DEBUG (Executor Output): Processing output item #3 (IsError=False): 'Get-Help'
Get-Help
DEBUG (Executor Output): Processing output item #4 (IsError=False): 'Test-Array-Binding'
Test-Array-Binding
DEBUG (Executor Output): Processing output item #5 (IsError=False): 'Write-Output'
Write-Output
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('After Get-Command') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'After Get-Command'
After Get-Command
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Variable Expansion (Using hardcoded $testVar) ---
DEBUG (Parser): Parsing '# --- Variable Expansion (Using hardcoded $testVar) ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output $testVar
DEBUG (Parser): Parsing 'Write-Output $testVar'...
DEBUG (Parser): Processing statement: 'Write-Output $testVar'
DEBUG (Parser): Expanding variable '$testVar' to 'Value from $testVar!' for argument building.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Value from $testVar!') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Value from $testVar!'
Value from $testVar!
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output ValueIs:$testVar
DEBUG (Parser): Parsing 'Write-Output ValueIs:$testVar'...
DEBUG (Parser): Processing statement: 'Write-Output ValueIs:$testVar'
DEBUG (Parser): Expanding variable '$testVar' to 'Value from $testVar!' for argument building.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('ValueIs:Value from $testVar!') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'ValueIs:Value from $testVar!'
ValueIs:Value from $testVar!
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output $nonExistentVar # Should be empty
DEBUG (Parser): Parsing 'Write-Output $nonExistentVar # Should be empty'...
DEBUG (Parser): Processing statement: 'Write-Output $nonExistentVar'
DEBUG (Parser): Expanding variable '$nonExistentVar' to '' for argument building.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=True, Count=0, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Final output collection is complete and empty.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Escape Characters ---
DEBUG (Parser): Parsing '# --- Escape Characters ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Literal $testVar -> \$testVar'
DEBUG (Parser): Parsing 'Write-Output 'Literal $testVar -> \$testVar''...
DEBUG (Parser): Processing statement: 'Write-Output 'Literal $testVar -> \$testVar''
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Literal $testVar -> \$testVar') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Literal $testVar -> \$testVar'
Literal $testVar -> \$testVar
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Literal Pipe -> \|'
DEBUG (Parser): Parsing 'Write-Output 'Literal Pipe -> \|''...
DEBUG (Parser): Processing statement: 'Write-Output 'Literal Pipe -> \|''
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Literal Pipe -> \|') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Literal Pipe -> \|'
Literal Pipe -> \|
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Literal Semicolon -> \;'
DEBUG (Parser): Parsing 'Write-Output 'Literal Semicolon -> \;''...
DEBUG (Parser): Processing statement: 'Write-Output 'Literal Semicolon -> \;''
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Literal Semicolon -> \;') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Literal Semicolon -> \;'
Literal Semicolon -> \;
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Literal Quote -> \"'
DEBUG (Parser): Parsing 'Write-Output 'Literal Quote -> \"''...
DEBUG (Parser): Processing statement: 'Write-Output 'Literal Quote -> \"''
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Literal Quote -> \"') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Literal Quote -> \"'
Literal Quote -> \"
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # Test escapes inside double quotes (Phase 3 Change)
DEBUG (Parser): Parsing '# Test escapes inside double quotes (Phase 3 Change)'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output "Quoted string with \\"escaped quote\\" inside"
DEBUG (Parser): Parsing 'Write-Output "Quoted string with \\"escaped quote\\" inside"'...
DEBUG (Parser): Processing statement: 'Write-Output "Quoted string with \\"escaped quote\\" inside"'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Quoted string with \escapedquote\\ inside') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Quoted string with \escapedquote\\ inside'
Quoted string with \escapedquote\\ inside
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output "Line1\nLine2"
DEBUG (Parser): Parsing 'Write-Output "Line1\nLine2"'...
DEBUG (Parser): Processing statement: 'Write-Output "Line1\nLine2"'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Line1
Line2') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Line1
Line2'
Line1
Line2
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output "Value is:\t\$testVar"
DEBUG (Parser): Parsing 'Write-Output "Value is:\t\$testVar"'...
DEBUG (Parser): Processing statement: 'Write-Output "Value is:\t\$testVar"'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Value is:	$testVar') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Value is:	$testVar'
Value is:	$testVar
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Parameter Binding Errors ---
DEBUG (Parser): Parsing '# --- Parameter Binding Errors ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Help -NonExistentParam
DEBUG (Parser): Parsing 'Get-Help -NonExistentParam'...
DEBUG (Parser): Processing statement: 'Get-Help -NonExistentParam'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Help'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Help'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Executor Task): 'Get-Help' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Help' finished processing.
DEBUG (Executor Task): Stage 'Get-Help' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=2, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Placeholder general help message. Try 'Get-Help <Command-Name>'.'
Placeholder general help message. Try 'Get-Help <Command-Name>'.
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Example: Get-Help Get-Command'
Example: Get-Help Get-Command
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Test-Array-Binding -InputStrings should fail
DEBUG (Parser): Parsing 'Test-Array-Binding -InputStrings should fail'...
DEBUG (Parser): Processing statement: 'Test-Array-Binding -InputStrings should fail'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Test-Array-Binding'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Test-Array-Binding'...
DEBUG (Binder): Binding parameters for TestArrayBindingCmdlet...
DEBUG (Binder): Found parameter via English name '-InputStrings'.
Task Error (ParameterBinding) in 'Test-Array-Binding': Cannot process argument transformation for parameter '-InputStrings'. Cannot convert value "should" to type "System.String[]".
DEBUG (Executor Task): Stage 'Test-Array-Binding' completed adding output.
ERROR (Executor): One or more pipeline tasks failed:
DEBUG (Executor): No final output to process (pipeline might have failed or produced no output).
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output -InputObject '@(1,2)'
DEBUG (Parser): Parsing 'Write-Output -InputObject '@(1,2)''...
DEBUG (Parser): Processing statement: 'Write-Output -InputObject '@(1,2)''
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Found parameter via English name '-InputObject'.
DEBUG (Binder): Bound named parameter '-InputObject' to value ''@(1,2)'' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): ''@(1,2)''
'@(1,2)'
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Redirection ---
DEBUG (Parser): Parsing '# --- Redirection ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Testing overwrite redirection' > temp_redirect_test.txt
DEBUG (Parser): Parsing 'Write-Output 'Testing overwrite redirection' > temp_redirect_test.txt'...
DEBUG (Parser): Processing statement: 'Write-Output 'Testing overwrite redirection' > temp_redirect_test.txt'
DEBUG (ParsedCommand): Added file redirection: > temp_redirect_test.txt
DEBUG (ParsedCommand): Added output redirection: >temp_redirect_test.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Testing overwrite redirection') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Redirecting stdout > temp_redirect_test.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to file 'temp_redirect_test.txt'...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Testing overwrite redirection'
DEBUG (Executor Output): Item #1 written and flushed to target file 'temp_redirect_test.txt'.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Command >> temp_append_test.txt
DEBUG (Parser): Parsing 'Get-Command >> temp_append_test.txt'...
DEBUG (Parser): Processing statement: 'Get-Command >> temp_append_test.txt'
DEBUG (ParsedCommand): Added file redirection: >> temp_append_test.txt
DEBUG (ParsedCommand): Added output redirection: >>temp_append_test.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Command'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Command'...
DEBUG (Binder): Binding parameters for GetCommandCmdlet...
DEBUG (Executor Task): 'Get-Command' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Command' finished processing.
DEBUG (Executor Task): Stage 'Get-Command' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Redirecting stdout >> temp_append_test.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=5, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to file 'temp_append_test.txt'...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'احصل-مساعدة'
DEBUG (Executor Output): Item #1 written and flushed to target file 'temp_append_test.txt'.
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Get-Command'
DEBUG (Executor Output): Item #2 written and flushed to target file 'temp_append_test.txt'.
DEBUG (Executor Output): Processing output item #3 (IsError=False): 'Get-Help'
DEBUG (Executor Output): Item #3 written and flushed to target file 'temp_append_test.txt'.
DEBUG (Executor Output): Processing output item #4 (IsError=False): 'Test-Array-Binding'
DEBUG (Executor Output): Item #4 written and flushed to target file 'temp_append_test.txt'.
DEBUG (Executor Output): Processing output item #5 (IsError=False): 'Write-Output'
DEBUG (Executor Output): Item #5 written and flushed to target file 'temp_append_test.txt'.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Appending another line' >> temp_append_test.txt
DEBUG (Parser): Parsing 'Write-Output 'Appending another line' >> temp_append_test.txt'...
DEBUG (Parser): Processing statement: 'Write-Output 'Appending another line' >> temp_append_test.txt'
DEBUG (ParsedCommand): Added file redirection: >> temp_append_test.txt
DEBUG (ParsedCommand): Added output redirection: >>temp_append_test.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Appending another line') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Redirecting stdout >> temp_append_test.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to file 'temp_append_test.txt'...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Appending another line'
DEBUG (Executor Output): Item #1 written and flushed to target file 'temp_append_test.txt'.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Advanced Redirection Parsing Tests (v0.7.5+) ---
DEBUG (Parser): Parsing '# --- Advanced Redirection Parsing Tests (v0.7.5+) ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: # Note: Executor does not yet HANDLE these, this tests PARSER recognition
DEBUG (Parser): Parsing '# Note: Executor does not yet HANDLE these, this tests PARSER recognition'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Stderr Redirect Test' 2> temp_stderr_test.txt
DEBUG (Parser): Parsing 'Write-Output 'Stderr Redirect Test' 2> temp_stderr_test.txt'...
DEBUG (Parser): Processing statement: 'Write-Output 'Stderr Redirect Test' 2> temp_stderr_test.txt'
DEBUG (ParsedCommand): Added file redirection: 2> temp_stderr_test.txt
DEBUG (ParsedCommand): Added output redirection: 2>temp_stderr_test.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Stderr Redirect Test') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Redirecting stderr 2> temp_stderr_test.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to file 'temp_stderr_test.txt'...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Stderr Redirect Test'
Stderr Redirect Test
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Stderr Append Test' 2>> temp_stderr_append_test.txt
DEBUG (Parser): Parsing 'Write-Output 'Stderr Append Test' 2>> temp_stderr_append_test.txt'...
DEBUG (Parser): Processing statement: 'Write-Output 'Stderr Append Test' 2>> temp_stderr_append_test.txt'
DEBUG (ParsedCommand): Added file redirection: 2>> temp_stderr_append_test.txt
DEBUG (ParsedCommand): Added output redirection: 2>>temp_stderr_append_test.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Stderr Append Test') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Redirecting stderr 2>> temp_stderr_append_test.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to file 'temp_stderr_append_test.txt'...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Stderr Append Test'
Stderr Append Test
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Stderr Append Test 2' 2>> temp_stderr_append_test.txt
DEBUG (Parser): Parsing 'Write-Output 'Stderr Append Test 2' 2>> temp_stderr_append_test.txt'...
DEBUG (Parser): Processing statement: 'Write-Output 'Stderr Append Test 2' 2>> temp_stderr_append_test.txt'
DEBUG (ParsedCommand): Added file redirection: 2>> temp_stderr_append_test.txt
DEBUG (ParsedCommand): Added output redirection: 2>>temp_stderr_append_test.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Stderr Append Test 2') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Redirecting stderr 2>> temp_stderr_append_test.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to file 'temp_stderr_append_test.txt'...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Stderr Append Test 2'
Stderr Append Test 2
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Merge Stderr to Stdout Test' 2>&1 | Write-Output # Pipe needed to see merged output
DEBUG (Parser): Parsing 'Write-Output 'Merge Stderr to Stdout Test' 2>&1 | Write-Output # Pipe needed to see merged output'...
DEBUG (Parser): Processing statement: 'Write-Output 'Merge Stderr to Stdout Test' 2>&1 | Write-Output'
DEBUG (ParsedCommand): Added stream redirection: 2>&1 (Source: 2, Target: 1, Append: False)
DEBUG (ParsedCommand): Added output redirection: 2>1
DEBUG (Parser): Statement parsed into 2 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (2 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor Pipeline): Preparing stage 1: 'Write-Output'...
DEBUG (Executor): Waiting for 2 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Merge Stderr to Stdout Test') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): 'Write-Output' consuming input...
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor Task): 'Write-Output' finished consuming input.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Merge Stderr to Stdout Test'
Merge Stderr to Stdout Test
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Merge Stdout to Stderr Test' >&2 # Less common, test parser
DEBUG (Parser): Parsing 'Write-Output 'Merge Stdout to Stderr Test' >&2 # Less common, test parser'...
DEBUG (Parser): Processing statement: 'Write-Output 'Merge Stdout to Stderr Test' >&2'
DEBUG (ParsedCommand): Added stream redirection: >&2 (Source: 1, Target: 2, Append: False)
DEBUG (ParsedCommand): Added output redirection: >2
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Merge Stdout to Stderr Test') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Detected stdout merge to stderr (1>&2).
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Merge Stdout to Stderr Test'
DEBUG (Executor Output): Routing regular object via 1>&2 merge.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Merge All to File Test' > temp_merged_test.txt 2>&1
DEBUG (Parser): Parsing 'Write-Output 'Merge All to File Test' > temp_merged_test.txt 2>&1'...
DEBUG (Parser): Processing statement: 'Write-Output 'Merge All to File Test' > temp_merged_test.txt 2>&1'
DEBUG (ParsedCommand): Added file redirection: > temp_merged_test.txt
DEBUG (ParsedCommand): Added output redirection: >temp_merged_test.txt
DEBUG (ParsedCommand): Added stream redirection: 2>&1 (Source: 2, Target: 1, Append: False)
DEBUG (ParsedCommand): Added output redirection: 2>1
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Merge All to File Test') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Detected stderr merge to stdout (2>&1).
DEBUG (Executor): Redirecting stdout > temp_merged_test.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to file 'temp_merged_test.txt'...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Merge All to File Test'
DEBUG (Executor Output): Item #1 written and flushed to target file 'temp_merged_test.txt'.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Multi Redirect Test' > temp_multi_out.txt 2> temp_multi_err.txt
DEBUG (Parser): Parsing 'Write-Output 'Multi Redirect Test' > temp_multi_out.txt 2> temp_multi_err.txt'...
DEBUG (Parser): Processing statement: 'Write-Output 'Multi Redirect Test' > temp_multi_out.txt 2> temp_multi_err.txt'
DEBUG (ParsedCommand): Added file redirection: > temp_multi_out.txt
DEBUG (ParsedCommand): Added output redirection: >temp_multi_out.txt
DEBUG (ParsedCommand): Added file redirection: 2> temp_multi_err.txt
DEBUG (ParsedCommand): Added output redirection: 2>temp_multi_err.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Multi Redirect Test') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Redirecting stdout > temp_multi_out.txt
DEBUG (Executor): Redirecting stderr 2> temp_multi_err.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to file 'temp_multi_out.txt'...
DEBUG (Executor Output): Writing final stderr output to file 'temp_multi_err.txt'...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Multi Redirect Test'
DEBUG (Executor Output): Item #1 written and flushed to target file 'temp_multi_out.txt'.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: احصل-مساعدة > temp_redirect_test.txt 2> temp_stderr_test.txt # Test with Arabic command
DEBUG (Parser): Parsing 'احصل-مساعدة > temp_redirect_test.txt 2> temp_stderr_test.txt # Test with Arabic command'...
DEBUG (Parser): Processing statement: 'احصل-مساعدة > temp_redirect_test.txt 2> temp_stderr_test.txt'
DEBUG (ParsedCommand): Added file redirection: > temp_redirect_test.txt
DEBUG (ParsedCommand): Added output redirection: >temp_redirect_test.txt
DEBUG (ParsedCommand): Added file redirection: 2> temp_stderr_test.txt
DEBUG (ParsedCommand): Added output redirection: 2>temp_stderr_test.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'احصل-مساعدة'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'احصل-مساعدة'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Executor Task): 'احصل-مساعدة' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'احصل-مساعدة' finished processing.
DEBUG (Executor Task): Stage 'احصل-مساعدة' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Redirecting stdout > temp_redirect_test.txt
DEBUG (Executor): Redirecting stderr 2> temp_stderr_test.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=2, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to file 'temp_redirect_test.txt'...
DEBUG (Executor Output): Writing final stderr output to file 'temp_stderr_test.txt'...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Placeholder general help message. Try 'Get-Help <Command-Name>'.'
DEBUG (Executor Output): Item #1 written and flushed to target file 'temp_redirect_test.txt'.
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Example: Get-Help Get-Command'
DEBUG (Executor Output): Item #2 written and flushed to target file 'temp_redirect_test.txt'.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Input Redirection Parsing Tests (Phase 3) ---
DEBUG (Parser): Parsing '# --- Input Redirection Parsing Tests (Phase 3) ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: # Create a dummy input file first using ArbSh itself
DEBUG (Parser): Parsing '# Create a dummy input file first using ArbSh itself'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output "Line for input redirection" > temp_input.txt
DEBUG (Parser): Parsing 'Write-Output "Line for input redirection" > temp_input.txt'...
DEBUG (Parser): Processing statement: 'Write-Output "Line for input redirection" > temp_input.txt'
DEBUG (ParsedCommand): Added file redirection: > temp_input.txt
DEBUG (ParsedCommand): Added output redirection: >temp_input.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Line for input redirection') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Redirecting stdout > temp_input.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to file 'temp_input.txt'...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Line for input redirection'
DEBUG (Executor Output): Item #1 written and flushed to target file 'temp_input.txt'.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Command < temp_input.txt # Test parser recognition of <
DEBUG (Parser): Parsing 'Get-Command < temp_input.txt # Test parser recognition of <'...
DEBUG (Parser): Processing statement: 'Get-Command < temp_input.txt'
DEBUG (ParsedCommand): Set input redirection to: < temp_input.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor): Attempting input redirection from 'temp_input.txt' for first command.
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Command'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Command'...
DEBUG (Binder): Binding parameters for GetCommandCmdlet...
DEBUG (Executor Task): 'Get-Command' consuming input...
DEBUG (Executor Task): 'Get-Command' finished consuming input.
DEBUG (Executor Task): 'Get-Command' finished processing.
DEBUG (Executor Task): Stage 'Get-Command' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Finished reading input redirect file 'temp_input.txt'. Input collection marked complete.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=5, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'احصل-مساعدة'
احصل-مساعدة
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Get-Command'
Get-Command
DEBUG (Executor Output): Processing output item #3 (IsError=False): 'Get-Help'
Get-Help
DEBUG (Executor Output): Processing output item #4 (IsError=False): 'Test-Array-Binding'
Test-Array-Binding
DEBUG (Executor Output): Processing output item #5 (IsError=False): 'Write-Output'
Write-Output
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output < temp_input.txt # Another test
DEBUG (Parser): Parsing 'Write-Output < temp_input.txt # Another test'...
DEBUG (Parser): Processing statement: 'Write-Output < temp_input.txt'
DEBUG (ParsedCommand): Set input redirection to: < temp_input.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor): Attempting input redirection from 'temp_input.txt' for first command.
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Executor Task): 'Write-Output' consuming input...
DEBUG (Executor Task): 'Write-Output' finished consuming input.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): Finished reading input redirect file 'temp_input.txt'. Input collection marked complete.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Line for input redirection'
Line for input redirection
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Sub-Expression Parsing Tests (v0.7.5+) ---
DEBUG (Parser): Parsing '# --- Sub-Expression Parsing Tests (v0.7.5+) ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: # Note: Executor does not yet HANDLE these, this tests PARSER recognition
DEBUG (Parser): Parsing '# Note: Executor does not yet HANDLE these, this tests PARSER recognition'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output $(Get-Command)
DEBUG (Parser): Parsing 'Write-Output $(Get-Command)'...
DEBUG (Parser): Processing statement: 'Write-Output $(Get-Command)'
DEBUG (Parser): Recursively parsing subexpression content: 'Get-Command'
DEBUG (Parser): Parsing 'Get-Command'...
DEBUG (Parser): Processing statement: 'Get-Command'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Parser): Added parsed subexpression (statement 0) as argument.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
WARN (Binder): Skipping non-string positional argument at index 0 for parameter 'InputObject'. Subexpression execution not implemented.
WARN (Binder): Unused positional argument of type List`1 detected at index 0. Subexpression execution not implemented.
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=True, Count=0, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Final output collection is complete and empty.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output Before $(Get-Help Write-Output) After
DEBUG (Parser): Parsing 'Write-Output Before $(Get-Help Write-Output) After'...
DEBUG (Parser): Processing statement: 'Write-Output Before $(Get-Help Write-Output) After'
DEBUG (Parser): Recursively parsing subexpression content: 'Get-Help Write-Output'
DEBUG (Parser): Parsing 'Get-Help Write-Output'...
DEBUG (Parser): Processing statement: 'Get-Help Write-Output'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Parser): Added parsed subexpression (statement 0) as argument.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Before') to property 'InputObject' (Type: Object)
WARN (Binder): Unused positional argument of type List`1 detected at index 1. Subexpression execution not implemented.
WARN (Binder): Unused positional string argument detected: After
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Before'
Before
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output $(Get-Command | Write-Output)
DEBUG (Parser): Parsing 'Write-Output $(Get-Command | Write-Output)'...
DEBUG (Parser): Processing statement: 'Write-Output $(Get-Command | Write-Output)'
WARN (Parser): Unterminated subexpression '$()' found.
DEBUG (Parser): Statement parsed into 2 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (2 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor Pipeline): Preparing stage 1: 'Write-Output'...
DEBUG (Executor): Waiting for 2 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 (')') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' consuming input...
DEBUG (Binder): Bound positional parameter at 0 ('Get-Command') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor Task): 'Write-Output' finished consuming input.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Get-Command'
Get-Command
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output $(Write-Output Outer $(Get-Command) Inner)
DEBUG (Parser): Parsing 'Write-Output $(Write-Output Outer $(Get-Command) Inner)'...
DEBUG (Parser): Processing statement: 'Write-Output $(Write-Output Outer $(Get-Command) Inner)'
DEBUG (Parser): Recursively parsing subexpression content: 'Write-Output Outer $( Get-Command'
DEBUG (Parser): Parsing 'Write-Output Outer $( Get-Command'...
DEBUG (Parser): Processing statement: 'Write-Output Outer $( Get-Command'
WARN (Parser): Unterminated subexpression '$()' found.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Parser): Added parsed subexpression (statement 0) as argument.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
WARN (Binder): Skipping non-string positional argument at index 0 for parameter 'InputObject'. Subexpression execution not implemented.
WARN (Binder): Unused positional argument of type List`1 detected at index 0. Subexpression execution not implemented.
WARN (Binder): Unused positional string argument detected: Inner)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=True, Count=0, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Final output collection is complete and empty.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Help -CommandName $(Write-Output Get-Command)
DEBUG (Parser): Parsing 'Get-Help -CommandName $(Write-Output Get-Command)'...
DEBUG (Parser): Processing statement: 'Get-Help -CommandName $(Write-Output Get-Command)'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Help'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Help'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Binder): Found parameter via English name '-CommandName'.
DEBUG (Binder): Bound named parameter '-CommandName' to value '$(' (Type: String)
WARN (Binder): Unused positional string argument detected: Write-OutputGet-Command)
DEBUG (Executor Task): 'Get-Help' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Help' finished processing.
DEBUG (Executor Task): Stage 'Get-Help' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Help Error: Command '$(' not found.'
Help Error: Command '$(' not found.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Type Literal Parsing Tests (Phase 3) ---
DEBUG (Parser): Parsing '# --- Type Literal Parsing Tests (Phase 3) ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output [int] 123
DEBUG (Parser): Parsing 'Write-Output [int] 123'...
DEBUG (Parser): Processing statement: 'Write-Output [int] 123'
DEBUG (Parser): Added TypeLiteral 'int' as argument.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('TypeLiteral:int') to property 'InputObject' (Type: Object)
WARN (Binder): Unused positional string argument detected: 123
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'TypeLiteral:int'
TypeLiteral:int
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output [System.ConsoleColor] "Red"
DEBUG (Parser): Parsing 'Write-Output [System.ConsoleColor] "Red"'...
DEBUG (Parser): Processing statement: 'Write-Output [System.ConsoleColor] "Red"'
DEBUG (Parser): Added TypeLiteral 'System.ConsoleColor' as argument.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('TypeLiteral:System.ConsoleColor') to property 'InputObject' (Type: Object)
WARN (Binder): Unused positional string argument detected: Red
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'TypeLiteral:System.ConsoleColor'
TypeLiteral:System.ConsoleColor
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output [ عربي ] "Test"
DEBUG (Parser): Parsing 'Write-Output [ عربي ] "Test"'...
DEBUG (Parser): Processing statement: 'Write-Output [ عربي ] "Test"'
DEBUG (Parser): Added TypeLiteral 'عربي' as argument.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('TypeLiteral:عربي') to property 'InputObject' (Type: Object)
WARN (Binder): Unused positional string argument detected: Test
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'TypeLiteral:عربي'
TypeLiteral:عربي
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output Before[string]After
DEBUG (Parser): Parsing 'Write-Output Before[string]After'...
DEBUG (Parser): Processing statement: 'Write-Output Before[string]After'
DEBUG (Parser): Added TypeLiteral 'string' as argument.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Before') to property 'InputObject' (Type: Object)
WARN (Binder): Unused positional string argument detected: After
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Before'
Before
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Mixed Script Tests (v0.7.5+) ---
DEBUG (Parser): Parsing '# --- Mixed Script Tests (v0.7.5+) ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: # Test parser handling of mixed scripts in various contexts
DEBUG (Parser): Parsing '# Test parser handling of mixed scripts in various contexts'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output "مرحبا World"
DEBUG (Parser): Parsing 'Write-Output "مرحبا World"'...
DEBUG (Parser): Processing statement: 'Write-Output "مرحبا World"'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('مرحبا World') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'مرحبا World'
مرحبا World
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output 'Hello عالم'
DEBUG (Parser): Parsing 'Write-Output 'Hello عالم''...
DEBUG (Parser): Processing statement: 'Write-Output 'Hello عالم''
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Hello عالم') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Hello عالم'
Hello عالم
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output Argument1 عربي Argument3
DEBUG (Parser): Parsing 'Write-Output Argument1 عربي Argument3'...
DEBUG (Parser): Processing statement: 'Write-Output Argument1 عربي Argument3'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Argument1عربيArgument3') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Argument1عربيArgument3'
Argument1عربيArgument3
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # Test-Array-Binding عربي English ثالثا # Mixed script array arguments
DEBUG (Parser): Parsing '# Test-Array-Binding عربي English ثالثا # Mixed script array arguments'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Help -CommandName Write-Output -Paramعربي Value # Mixed script parameter name (should be ignored by binder)
DEBUG (Parser): Parsing 'Get-Help -CommandName Write-Output -Paramعربي Value # Mixed script parameter name (should be ignored by binder)'...
DEBUG (Parser): Processing statement: 'Get-Help -CommandName Write-Output -Paramعربي Value'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Help'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Help'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Binder): Found parameter via English name '-CommandName'.
DEBUG (Binder): Bound named parameter '-CommandName' to value 'Write-Output' (Type: String)
DEBUG (Executor Task): 'Get-Help' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Help' finished processing.
DEBUG (Executor Task): Stage 'Get-Help' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): '
NAME
    Write-Output

SYNOPSIS
    (Synopsis for Write-Output not available)

SYNTAX
    Write-Output [-InputObject <Object>]
'

NAME
    Write-Output

SYNOPSIS
    (Synopsis for Write-Output not available)

SYNTAX
    Write-Output [-InputObject <Object>]

DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Get-Help -CommandName Write-Output -اسمEnglish Value # Mixed script parameter name (should be ignored by binder)
DEBUG (Parser): Parsing 'Get-Help -CommandName Write-Output -اسمEnglish Value # Mixed script parameter name (should be ignored by binder)'...
DEBUG (Parser): Processing statement: 'Get-Help -CommandName Write-Output -اسمEnglish Value'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Get-Help'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Get-Help'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Binder): Found parameter via English name '-CommandName'.
DEBUG (Binder): Bound named parameter '-CommandName' to value 'Write-Output' (Type: String)
DEBUG (Executor Task): 'Get-Help' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Get-Help' finished processing.
DEBUG (Executor Task): Stage 'Get-Help' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): '
NAME
    Write-Output

SYNOPSIS
    (Synopsis for Write-Output not available)

SYNTAX
    Write-Output [-InputObject <Object>]
'

NAME
    Write-Output

SYNOPSIS
    (Synopsis for Write-Output not available)

SYNTAX
    Write-Output [-InputObject <Object>]

DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output "مرحبا"|Write-Output "World" # Mixed script separated by pipe
DEBUG (Parser): Parsing 'Write-Output "مرحبا"|Write-Output "World" # Mixed script separated by pipe'...
DEBUG (Parser): Processing statement: 'Write-Output "مرحبا"|Write-Output "World"'
DEBUG (Parser): Statement parsed into 2 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (2 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor Pipeline): Preparing stage 1: 'Write-Output'...
DEBUG (Executor): Waiting for 2 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('World') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' consuming input...
DEBUG (Binder): Bound positional parameter at 0 ('مرحبا') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor Task): 'Write-Output' finished consuming input.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'مرحبا'
مرحبا
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output "Hello";Write-Output "عالم" # Mixed script separated by semicolon
DEBUG (Parser): Parsing 'Write-Output "Hello";Write-Output "عالم" # Mixed script separated by semicolon'...
DEBUG (Parser): Processing statement: 'Write-Output "Hello"'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Processing statement: 'Write-Output "عالم"'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 2 statement(s).
DEBUG (Executor): Executing 2 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Hello') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Hello'
Hello
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('عالم') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'عالم'
عالم
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output $testVar # Should expand
DEBUG (Parser): Parsing 'Write-Output $testVar # Should expand'...
DEBUG (Parser): Processing statement: 'Write-Output $testVar'
DEBUG (Parser): Expanding variable '$testVar' to 'Value from $testVar!' for argument building.
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Value from $testVar!') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Value from $testVar!'
Value from $testVar!
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # Write-Output $متغير_عربي # Variable expansion with Arabic name (needs variable definition first)
DEBUG (Parser): Parsing '# Write-Output $متغير_عربي # Variable expansion with Arabic name (needs variable definition first)'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Mixed Script Edge Cases (Parser Robustness) ---
DEBUG (Parser): Parsing '# --- Mixed Script Edge Cases (Parser Robustness) ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output Commandمرحبا # Mixed identifier
DEBUG (Parser): Parsing 'Write-Output Commandمرحبا # Mixed identifier'...
DEBUG (Parser): Processing statement: 'Write-Output Commandمرحبا'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Commandمرحبا') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Commandمرحبا'
Commandمرحبا
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output اسمCommand # Mixed identifier
DEBUG (Parser): Parsing 'Write-Output اسمCommand # Mixed identifier'...
DEBUG (Parser): Processing statement: 'Write-Output اسمCommand'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('اسمCommand') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'اسمCommand'
اسمCommand
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output Command-اسم # Mixed identifier with hyphen
DEBUG (Parser): Parsing 'Write-Output Command-اسم # Mixed identifier with hyphen'...
DEBUG (Parser): Processing statement: 'Write-Output Command-اسم'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Command-اسم') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Command-اسم'
Command-اسم
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output اسم-Command # Mixed identifier with hyphen
DEBUG (Parser): Parsing 'Write-Output اسم-Command # Mixed identifier with hyphen'...
DEBUG (Parser): Processing statement: 'Write-Output اسم-Command'
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('اسم-Command') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'اسم-Command'
اسم-Command
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output Command1>ملف.txt # Operator touching Arabic
DEBUG (Parser): Parsing 'Write-Output Command1>ملف.txt # Operator touching Arabic'...
DEBUG (Parser): Processing statement: 'Write-Output Command1>ملف.txt'
DEBUG (ParsedCommand): Added file redirection: > ملف.txt
DEBUG (ParsedCommand): Added output redirection: >ملف.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Command1') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Redirecting stdout > ملف.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to file 'ملف.txt'...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Command1'
DEBUG (Executor Output): Item #1 written and flushed to target file 'ملف.txt'.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: Write-Output Command2<ملف.txt # Operator touching Arabic
DEBUG (Parser): Parsing 'Write-Output Command2<ملف.txt # Operator touching Arabic'...
DEBUG (Parser): Processing statement: 'Write-Output Command2<ملف.txt'
DEBUG (ParsedCommand): Set input redirection to: < ملف.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor): Attempting input redirection from 'ملف.txt' for first command.
DEBUG (Executor Pipeline): Preparing stage 0: 'Write-Output'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor): Finished reading input redirect file 'ملف.txt'. Input collection marked complete.
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Binder): Bound positional parameter at 0 ('Command2') to property 'InputObject' (Type: Object)
DEBUG (Executor Task): 'Write-Output' consuming input...
DEBUG (Executor Task): 'Write-Output' finished consuming input.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=1, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Command1'
Command1
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: احصل-مساعدة>file.txt # Arabic command touching operator
DEBUG (Parser): Parsing 'احصل-مساعدة>file.txt # Arabic command touching operator'...
DEBUG (Parser): Processing statement: 'احصل-مساعدة>file.txt'
DEBUG (ParsedCommand): Added file redirection: > file.txt
DEBUG (ParsedCommand): Added output redirection: >file.txt
DEBUG (Parser): Statement parsed into 1 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (1 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'احصل-مساعدة'...
DEBUG (Executor): Waiting for 1 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'احصل-مساعدة'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Executor Task): 'احصل-مساعدة' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'احصل-مساعدة' finished processing.
DEBUG (Executor Task): Stage 'احصل-مساعدة' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor): Redirecting stdout > file.txt
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=2, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to file 'file.txt'...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Placeholder general help message. Try 'Get-Help <Command-Name>'.'
DEBUG (Executor Output): Item #1 written and flushed to target file 'file.txt'.
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Example: Get-Help Get-Command'
DEBUG (Executor Output): Item #2 written and flushed to target file 'file.txt'.
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: احصل-مساعدة|Write-Output # Arabic command touching operator
DEBUG (Parser): Parsing 'احصل-مساعدة|Write-Output # Arabic command touching operator'...
DEBUG (Parser): Processing statement: 'احصل-مساعدة|Write-Output'
DEBUG (Parser): Statement parsed into 2 pipeline stage(s).
DEBUG (Parser): Parsed into 1 statement(s).
DEBUG (Executor): Executing 1 statement(s)...
DEBUG (Executor): --- Executing Statement (2 command(s)) ---
DEBUG (Executor Pipeline): Preparing stage 0: 'احصل-مساعدة'...
DEBUG (Executor Pipeline): Preparing stage 1: 'Write-Output'...
DEBUG (Executor): Waiting for 2 task(s) in the pipeline to complete...
DEBUG (Executor Task): Starting task for 'احصل-مساعدة'...
DEBUG (Binder): Binding parameters for GetHelpCmdlet...
DEBUG (Executor Task): 'احصل-مساعدة' has no pipeline input, calling ProcessRecord once.
DEBUG (Executor Task): 'احصل-مساعدة' finished processing.
DEBUG (Executor Task): Stage 'احصل-مساعدة' completed adding output.
DEBUG (Executor Task): Starting task for 'Write-Output'...
DEBUG (Binder): Binding parameters for WriteOutputCmdlet...
DEBUG (Executor Task): 'Write-Output' consuming input...
DEBUG (Executor Task): 'Write-Output' finished consuming input.
DEBUG (Executor Task): 'Write-Output' finished processing.
DEBUG (Executor Task): Stage 'Write-Output' completed adding output.
DEBUG (Executor): All pipeline tasks for the statement completed.
DEBUG (Executor Output): Checking final output. IsCompleted=False, Count=2, IsAddingCompleted=True
DEBUG (Executor Output): Writing final stdout output to Console...
DEBUG (Executor Output): Writing final stderr output to Console...
DEBUG (Executor Output): Processing output item #1 (IsError=False): 'Placeholder general help message. Try 'Get-Help <Command-Name>'.'
Placeholder general help message. Try 'Get-Help <Command-Name>'.
DEBUG (Executor Output): Processing output item #2 (IsError=False): 'Example: Get-Help Get-Command'
Example: Get-Help Get-Command
DEBUG (Executor): --- Statement execution finished ---
DEBUG (Executor): All statements executed.
DEBUG: Received command: # --- Exit ---
DEBUG (Parser): Parsing '# --- Exit ---'...
DEBUG (Parser): Parsed into 0 statement(s).
DEBUG (Executor): Executing 0 statement(s)...
DEBUG (Executor): All statements executed.

[2025-05-07 20:12:03] --- ArbSh Error Output ---
Merge Stdout to Stderr Test

[2025-05-07 20:12:03] --- End ArbSh Error Output ---
[2025-05-07 20:12:03] --- ArbSh End Output ---
[2025-05-07 20:12:03] ArbSh process exited with code 0.
[2025-05-07 20:12:03] Verifying redirection files...
[2025-05-07 20:12:03] Content of temp_redirect_test.txt:
Placeholder general help message. Try 'Get-Help <Command-Name>'.
Example: Get-Help Get-Command
[2025-05-07 20:12:03] Content of temp_append_test.txt:
احصل-مساعدة
Get-Command
Get-Help
Test-Array-Binding
Write-Output
Appending another line
[2025-05-07 20:12:03] Checking existence of advanced redirection test files (Parser test only)...
[2025-05-07 20:12:03] INFO: temp_stderr_test.txt exists (Parser likely recognized 2>).
[2025-05-07 20:12:03] INFO: temp_stderr_append_test.txt exists (Parser likely recognized 2>>).
[2025-05-07 20:12:03] INFO: temp_merged_test.txt exists (Parser likely recognized > file 2>&1).
[2025-05-07 20:12:03] INFO: temp_multi_out.txt exists (Parser likely recognized > file1).
[2025-05-07 20:12:03] INFO: temp_multi_err.txt exists (Parser likely recognized 2> file2).
[2025-05-07 20:12:03] Test script finished.
